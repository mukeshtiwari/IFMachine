/* The following code was generated by JFlex 1.7.0 */

package secc.c;

import java.util.Set;
import beaver.Symbol;
import secc.c.Parser.Terminals;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>secc/src/secc/c/Scanner.flex</tt>
 */
public class Scanner extends beaver.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\5\1\6\1\1\22\0\1\3\1\23\1\71"+
    "\1\7\1\73\1\33\1\36\1\0\1\11\1\12\1\10\1\17\1\43"+
    "\1\20\1\21\1\4\12\75\1\42\1\44\1\34\1\35\1\22\1\41"+
    "\1\0\32\74\1\13\1\72\1\14\1\37\1\65\1\0\1\51\1\62"+
    "\1\47\1\46\1\30\1\32\1\67\1\50\1\26\1\74\1\63\1\61"+
    "\1\56\1\53\1\31\1\60\1\66\1\52\1\25\1\54\1\55\1\45"+
    "\1\64\1\70\1\57\1\27\1\15\1\40\1\16\1\24\6\0\1\5"+
    "\u1fa2\0\1\5\1\5\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\6\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\14\21\1\34\1\21"+
    "\2\1\1\35\2\0\1\36\2\2\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\3\21\1\45\10\21\1\46\1\47"+
    "\1\50\1\51\1\0\1\52\1\53\1\54\1\21\1\55"+
    "\22\21\1\0\1\56\1\0\1\57\2\0\5\21\1\60"+
    "\1\21\1\61\3\21\1\62\1\63\3\21\1\64\1\65"+
    "\1\66\32\21\1\0\6\21\1\67\1\70\2\21\1\71"+
    "\2\21\1\72\2\21\1\73\7\21\1\74\6\21\1\75"+
    "\2\21\1\76\16\21\1\77\6\21\1\100\6\21\1\101"+
    "\3\21\1\102\1\103\1\104\1\105\1\106\1\107\1\21"+
    "\1\110\1\111\1\112\1\21\1\113\1\21\1\114\1\115"+
    "\3\21\1\116\1\117\1\120\1\121\1\21\1\122\3\21"+
    "\1\123\4\21\1\124\6\21\1\125\4\21\1\126\1\127"+
    "\1\130\1\131\1\132\1\133\3\21\1\134\1\135\1\136"+
    "\1\137";

  private static int [] zzUnpackAction() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\76\0\76"+
    "\0\76\0\76\0\76\0\76\0\u0174\0\u01b2\0\76\0\u01f0"+
    "\0\u022e\0\76\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u03a2"+
    "\0\u0136\0\u03e0\0\u041e\0\u045c\0\u0136\0\u049a\0\76\0\u04d8"+
    "\0\76\0\76\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c"+
    "\0\u068a\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\u02e8\0\u07fe"+
    "\0\u083c\0\u087a\0\u08b8\0\370\0\u08f6\0\76\0\u0934\0\76"+
    "\0\76\0\76\0\76\0\u0136\0\76\0\76\0\u0972\0\u09b0"+
    "\0\u09ee\0\u02e8\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62"+
    "\0\u0ba0\0\u0bde\0\u0136\0\u0c1c\0\u0c5a\0\76\0\u0c98\0\76"+
    "\0\76\0\76\0\u0cd6\0\u02e8\0\u0d14\0\u0d52\0\u0d90\0\u0dce"+
    "\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe"+
    "\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u083c\0\76"+
    "\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322"+
    "\0\u1360\0\u02e8\0\u139e\0\u02e8\0\u13dc\0\u141a\0\u1458\0\u02e8"+
    "\0\u1496\0\u14d4\0\u1512\0\u1550\0\76\0\76\0\76\0\u158e"+
    "\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e"+
    "\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e"+
    "\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e"+
    "\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e"+
    "\0\u02e8\0\u02e8\0\u1d8c\0\u1dca\0\u02e8\0\u1e08\0\u1e46\0\u02e8"+
    "\0\u1e84\0\u1ec2\0\u02e8\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8"+
    "\0\u2036\0\u2074\0\u02e8\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa"+
    "\0\u21e8\0\76\0\u2226\0\u2264\0\u02e8\0\u22a2\0\u22e0\0\u231e"+
    "\0\u235c\0\u239a\0\u23d8\0\u2416\0\u2454\0\u2492\0\u24d0\0\u250e"+
    "\0\u254c\0\u258a\0\u25c8\0\u02e8\0\u2606\0\u2644\0\u2682\0\u26c0"+
    "\0\u26fe\0\u273c\0\u02e8\0\u277a\0\u27b8\0\u27f6\0\u2834\0\u2872"+
    "\0\u28b0\0\u02e8\0\u28ee\0\u292c\0\u296a\0\u02e8\0\76\0\u02e8"+
    "\0\u02e8\0\u02e8\0\u02e8\0\u29a8\0\u02e8\0\u02e8\0\u02e8\0\u29e6"+
    "\0\u02e8\0\u2a24\0\u02e8\0\u02e8\0\u2a62\0\u2aa0\0\u2ade\0\u02e8"+
    "\0\u02e8\0\u02e8\0\u02e8\0\u2b1c\0\u02e8\0\u2b5a\0\u2b98\0\u2bd6"+
    "\0\u02e8\0\u2c14\0\u2c52\0\u2c90\0\u2cce\0\u02e8\0\u2d0c\0\u2d4a"+
    "\0\u2d88\0\u2dc6\0\u2e04\0\u2e42\0\u02e8\0\u2e80\0\u2ebe\0\u2efc"+
    "\0\u2f3a\0\u02e8\0\u02e8\0\u02e8\0\u02e8\0\u02e8\0\u02e8\0\u2f78"+
    "\0\u2fb6\0\u2ff4\0\u02e8\0\u02e8\0\u02e8\0\u02e8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\2\1\3\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\25\1\46"+
    "\1\47\1\25\1\50\1\51\1\52\1\25\1\53\1\54"+
    "\1\55\1\25\1\56\1\57\1\25\1\60\1\25\1\61"+
    "\1\2\1\62\1\25\1\63\77\0\3\3\2\0\1\3"+
    "\73\0\1\64\3\0\1\65\24\0\1\66\40\0\1\64"+
    "\1\67\1\70\2\64\2\0\67\64\35\0\1\66\57\0"+
    "\1\71\15\0\1\66\60\0\1\72\1\0\1\73\12\0"+
    "\1\66\62\0\1\74\12\0\1\75\75\0\1\76\65\0"+
    "\1\25\1\77\4\25\12\0\3\25\1\100\3\25\1\101"+
    "\14\25\3\0\2\25\25\0\5\25\1\102\12\0\6\25"+
    "\1\103\15\25\3\0\2\25\25\0\6\25\12\0\24\25"+
    "\3\0\2\25\25\0\6\25\12\0\6\25\1\104\5\25"+
    "\1\105\6\25\1\106\3\0\2\25\25\0\6\25\12\0"+
    "\14\25\1\107\7\25\3\0\2\25\25\0\4\25\1\110"+
    "\1\25\12\0\4\25\1\111\3\25\1\112\13\25\3\0"+
    "\2\25\34\0\1\113\1\114\75\0\1\115\75\0\1\66"+
    "\1\116\57\0\1\117\14\0\1\66\2\0\1\120\72\0"+
    "\1\121\4\0\1\122\60\0\4\25\1\123\1\25\12\0"+
    "\24\25\3\0\2\25\25\0\4\25\1\124\1\25\12\0"+
    "\24\25\3\0\2\25\25\0\4\25\1\125\1\25\12\0"+
    "\3\25\1\126\20\25\3\0\2\25\25\0\1\127\5\25"+
    "\12\0\7\25\1\130\3\25\1\131\7\25\1\132\3\0"+
    "\2\25\25\0\3\25\1\133\2\25\12\0\24\25\3\0"+
    "\2\25\25\0\6\25\12\0\12\25\1\134\11\25\3\0"+
    "\2\25\25\0\6\25\12\0\6\25\1\135\15\25\3\0"+
    "\2\25\25\0\6\25\12\0\4\25\1\136\17\25\3\0"+
    "\2\25\25\0\6\25\12\0\5\25\1\137\2\25\1\140"+
    "\13\25\3\0\2\25\25\0\1\25\1\141\1\25\1\142"+
    "\2\25\12\0\24\25\3\0\2\25\25\0\3\25\1\143"+
    "\2\25\12\0\5\25\1\144\16\25\3\0\2\25\25\0"+
    "\6\25\12\0\3\25\1\145\20\25\3\0\2\25\25\0"+
    "\6\25\12\0\10\25\1\146\13\25\3\0\2\25\71\147"+
    "\1\150\1\151\3\147\25\0\6\152\12\0\24\152\3\0"+
    "\1\152\76\0\1\63\10\153\1\154\65\153\2\0\1\70"+
    "\120\0\2\25\1\155\3\25\12\0\24\25\3\0\2\25"+
    "\25\0\6\25\12\0\4\25\1\156\17\25\3\0\2\25"+
    "\25\0\6\25\12\0\5\25\1\157\16\25\3\0\2\25"+
    "\25\0\6\25\12\0\1\160\1\161\5\25\1\162\14\25"+
    "\3\0\2\25\25\0\1\163\5\25\12\0\1\25\1\164"+
    "\6\25\1\165\13\25\3\0\2\25\25\0\1\166\5\25"+
    "\12\0\24\25\3\0\2\25\25\0\1\25\1\167\4\25"+
    "\12\0\24\25\3\0\2\25\25\0\6\25\12\0\1\25"+
    "\1\170\22\25\3\0\2\25\25\0\6\25\12\0\5\25"+
    "\1\171\6\25\1\172\7\25\3\0\2\25\25\0\1\25"+
    "\1\173\4\25\12\0\24\25\3\0\2\25\25\0\6\25"+
    "\12\0\6\25\1\174\15\25\3\0\2\25\22\0\1\175"+
    "\75\0\1\176\75\0\1\177\100\0\1\25\1\200\4\25"+
    "\12\0\24\25\3\0\2\25\25\0\6\25\12\0\6\25"+
    "\1\201\15\25\3\0\2\25\25\0\6\25\12\0\4\25"+
    "\1\202\17\25\3\0\2\25\25\0\1\203\5\25\12\0"+
    "\24\25\3\0\2\25\25\0\4\25\1\204\1\25\12\0"+
    "\24\25\3\0\2\25\25\0\6\25\12\0\13\25\1\205"+
    "\10\25\3\0\2\25\25\0\1\25\1\206\4\25\12\0"+
    "\24\25\3\0\2\25\25\0\1\207\5\25\12\0\7\25"+
    "\1\210\4\25\1\211\2\25\1\212\1\25\1\213\2\25"+
    "\3\0\2\25\25\0\6\25\12\0\13\25\1\214\10\25"+
    "\3\0\2\25\25\0\1\25\1\215\3\25\1\216\12\0"+
    "\24\25\3\0\2\25\25\0\1\25\1\217\4\25\12\0"+
    "\13\25\1\220\10\25\3\0\2\25\25\0\3\25\1\221"+
    "\2\25\12\0\10\25\1\222\13\25\3\0\2\25\25\0"+
    "\6\25\12\0\5\25\1\223\16\25\3\0\2\25\25\0"+
    "\1\224\5\25\12\0\24\25\3\0\2\25\25\0\6\25"+
    "\12\0\11\25\1\225\12\25\3\0\2\25\25\0\6\25"+
    "\12\0\22\25\1\226\1\25\3\0\2\25\25\0\3\25"+
    "\1\227\2\25\12\0\24\25\3\0\2\25\25\0\1\25"+
    "\1\230\4\25\12\0\24\25\3\0\2\25\25\0\6\25"+
    "\12\0\4\25\1\231\17\25\3\0\2\25\1\147\2\0"+
    "\2\147\2\0\67\147\25\0\6\152\12\0\24\152\3\0"+
    "\2\152\10\153\1\232\65\153\4\0\1\70\3\0\1\154"+
    "\112\0\3\25\1\233\2\25\12\0\24\25\3\0\2\25"+
    "\25\0\6\25\12\0\5\25\1\234\16\25\3\0\2\25"+
    "\25\0\6\25\12\0\10\25\1\235\13\25\3\0\2\25"+
    "\25\0\6\25\12\0\4\25\1\236\17\25\3\0\2\25"+
    "\25\0\6\25\12\0\10\25\1\237\13\25\3\0\2\25"+
    "\25\0\6\25\12\0\10\25\1\240\13\25\3\0\2\25"+
    "\25\0\6\25\12\0\11\25\1\241\12\25\3\0\2\25"+
    "\25\0\3\25\1\242\2\25\12\0\24\25\3\0\2\25"+
    "\25\0\1\243\5\25\12\0\24\25\3\0\2\25\25\0"+
    "\6\25\12\0\4\25\1\244\17\25\3\0\2\25\25\0"+
    "\6\25\12\0\1\25\1\245\22\25\3\0\2\25\25\0"+
    "\6\25\12\0\14\25\1\246\7\25\3\0\2\25\25\0"+
    "\6\25\12\0\2\25\1\247\21\25\3\0\2\25\25\0"+
    "\6\25\12\0\1\25\1\250\22\25\3\0\2\25\25\0"+
    "\1\251\5\25\12\0\7\25\1\252\14\25\3\0\2\25"+
    "\25\0\6\25\12\0\5\25\1\253\16\25\3\0\2\25"+
    "\25\0\3\25\1\254\2\25\12\0\10\25\1\255\13\25"+
    "\3\0\2\25\25\0\6\25\12\0\11\25\1\256\12\25"+
    "\3\0\2\25\25\0\6\25\12\0\14\25\1\257\7\25"+
    "\3\0\2\25\25\0\4\25\1\260\1\25\12\0\24\25"+
    "\3\0\2\25\25\0\4\25\1\261\1\25\12\0\24\25"+
    "\3\0\2\25\25\0\6\25\12\0\10\25\1\262\13\25"+
    "\3\0\2\25\25\0\6\25\12\0\12\25\1\263\11\25"+
    "\3\0\2\25\25\0\6\25\12\0\5\25\1\264\16\25"+
    "\3\0\2\25\25\0\6\25\12\0\10\25\1\265\13\25"+
    "\3\0\2\25\25\0\3\25\1\266\2\25\12\0\24\25"+
    "\3\0\2\25\25\0\4\25\1\267\1\25\12\0\24\25"+
    "\3\0\2\25\25\0\4\25\1\270\1\25\12\0\24\25"+
    "\3\0\2\25\25\0\6\25\12\0\6\25\1\271\15\25"+
    "\3\0\2\25\25\0\6\25\1\0\1\272\10\0\24\25"+
    "\3\0\2\25\25\0\6\25\12\0\1\25\1\273\22\25"+
    "\3\0\2\25\25\0\6\25\12\0\6\25\1\274\15\25"+
    "\3\0\2\25\25\0\3\25\1\275\2\25\12\0\24\25"+
    "\3\0\2\25\25\0\6\25\12\0\7\25\1\276\14\25"+
    "\3\0\2\25\25\0\6\25\12\0\11\25\1\277\12\25"+
    "\3\0\2\25\25\0\1\25\1\300\4\25\12\0\24\25"+
    "\3\0\2\25\25\0\6\25\12\0\4\25\1\301\17\25"+
    "\3\0\2\25\25\0\6\25\12\0\14\25\1\302\7\25"+
    "\3\0\2\25\25\0\6\25\12\0\5\25\1\303\16\25"+
    "\3\0\2\25\4\153\1\70\3\153\1\232\65\153\25\0"+
    "\4\25\1\304\1\25\12\0\24\25\3\0\2\25\25\0"+
    "\3\25\1\305\2\25\12\0\24\25\3\0\2\25\25\0"+
    "\6\25\12\0\2\25\1\306\21\25\3\0\2\25\25\0"+
    "\6\25\12\0\5\25\1\307\16\25\3\0\2\25\25\0"+
    "\6\25\12\0\2\25\1\310\21\25\3\0\2\25\25\0"+
    "\6\25\12\0\5\25\1\311\16\25\3\0\2\25\25\0"+
    "\6\25\12\0\7\25\1\312\14\25\3\0\2\25\25\0"+
    "\6\25\12\0\14\25\1\313\7\25\3\0\2\25\25\0"+
    "\1\314\5\25\12\0\24\25\3\0\2\25\25\0\6\25"+
    "\12\0\7\25\1\315\14\25\3\0\2\25\25\0\6\25"+
    "\12\0\7\25\1\316\14\25\3\0\2\25\25\0\1\25"+
    "\1\317\4\25\12\0\24\25\3\0\2\25\25\0\6\25"+
    "\12\0\5\25\1\320\16\25\3\0\2\25\25\0\6\25"+
    "\12\0\11\25\1\321\12\25\3\0\2\25\25\0\1\25"+
    "\1\322\4\25\12\0\24\25\3\0\2\25\25\0\6\25"+
    "\12\0\12\25\1\323\11\25\3\0\2\25\25\0\6\25"+
    "\12\0\11\25\1\324\12\25\3\0\2\25\25\0\6\25"+
    "\12\0\10\25\1\325\13\25\3\0\2\25\25\0\6\25"+
    "\12\0\5\25\1\326\16\25\3\0\2\25\25\0\1\25"+
    "\1\327\4\25\12\0\24\25\3\0\2\25\25\0\1\25"+
    "\1\330\4\25\12\0\24\25\3\0\2\25\25\0\6\25"+
    "\12\0\1\25\1\331\22\25\3\0\2\25\25\0\6\25"+
    "\12\0\6\25\1\332\15\25\3\0\2\25\25\0\6\25"+
    "\12\0\14\25\1\333\7\25\3\0\2\25\25\0\6\25"+
    "\12\0\7\25\1\334\14\25\3\0\2\25\25\0\1\25"+
    "\1\335\4\25\12\0\24\25\3\0\2\25\25\0\3\25"+
    "\1\336\2\25\12\0\24\25\3\0\2\25\25\0\6\25"+
    "\1\0\1\337\10\0\24\25\3\0\2\25\25\0\6\25"+
    "\12\0\4\25\1\340\17\25\3\0\2\25\25\0\6\25"+
    "\12\0\6\25\1\341\15\25\3\0\2\25\25\0\6\25"+
    "\12\0\16\25\1\342\5\25\3\0\2\25\25\0\3\25"+
    "\1\343\2\25\12\0\24\25\3\0\2\25\25\0\6\25"+
    "\12\0\4\25\1\344\17\25\3\0\2\25\25\0\5\25"+
    "\1\345\12\0\24\25\3\0\2\25\25\0\6\25\12\0"+
    "\1\25\1\346\22\25\3\0\2\25\25\0\6\25\12\0"+
    "\7\25\1\347\14\25\3\0\2\25\25\0\1\25\1\350"+
    "\4\25\12\0\24\25\3\0\2\25\25\0\6\25\12\0"+
    "\7\25\1\351\14\25\3\0\2\25\25\0\3\25\1\352"+
    "\2\25\12\0\24\25\3\0\2\25\25\0\1\353\5\25"+
    "\12\0\24\25\3\0\2\25\25\0\6\25\12\0\14\25"+
    "\1\354\7\25\3\0\2\25\25\0\1\25\1\355\4\25"+
    "\12\0\24\25\3\0\2\25\25\0\6\25\12\0\4\25"+
    "\1\356\17\25\3\0\2\25\25\0\6\25\12\0\6\25"+
    "\1\357\15\25\3\0\2\25\25\0\6\25\12\0\7\25"+
    "\1\360\14\25\3\0\2\25\25\0\3\25\1\361\2\25"+
    "\12\0\24\25\3\0\2\25\25\0\6\25\12\0\2\25"+
    "\1\362\21\25\3\0\2\25\25\0\1\363\5\25\12\0"+
    "\24\25\3\0\2\25\25\0\6\25\12\0\5\25\1\364"+
    "\16\25\3\0\2\25\25\0\6\25\12\0\6\25\1\365"+
    "\15\25\3\0\2\25\25\0\6\25\12\0\7\25\1\366"+
    "\14\25\3\0\2\25\25\0\6\25\12\0\5\25\1\367"+
    "\16\25\3\0\2\25\25\0\3\25\1\370\2\25\12\0"+
    "\24\25\3\0\2\25\25\0\6\25\12\0\1\25\1\371"+
    "\22\25\3\0\2\25\25\0\6\25\12\0\4\25\1\372"+
    "\17\25\3\0\2\25\25\0\6\25\12\0\2\25\1\373"+
    "\21\25\3\0\2\25\25\0\6\25\12\0\6\25\1\374"+
    "\15\25\3\0\2\25\25\0\6\25\12\0\4\25\1\375"+
    "\17\25\3\0\2\25\25\0\1\376\5\25\12\0\24\25"+
    "\3\0\2\25\25\0\4\25\1\377\1\25\12\0\24\25"+
    "\3\0\2\25\25\0\6\25\12\0\6\25\1\u0100\15\25"+
    "\3\0\2\25\25\0\6\25\12\0\10\25\1\u0101\13\25"+
    "\3\0\2\25\25\0\6\25\12\0\2\25\1\u0102\21\25"+
    "\3\0\2\25\25\0\3\25\1\u0103\2\25\12\0\24\25"+
    "\3\0\2\25\25\0\3\25\1\u0104\2\25\12\0\24\25"+
    "\3\0\2\25\25\0\5\25\1\u0105\12\0\24\25\3\0"+
    "\2\25\25\0\1\25\1\u0106\4\25\12\0\24\25\3\0"+
    "\2\25\25\0\6\25\12\0\4\25\1\u0107\17\25\3\0"+
    "\2\25\25\0\6\25\12\0\7\25\1\u0108\14\25\3\0"+
    "\2\25\25\0\6\25\12\0\6\25\1\u0109\15\25\3\0"+
    "\2\25\25\0\6\25\12\0\6\25\1\u010a\15\25\3\0"+
    "\2\25\25\0\6\25\12\0\7\25\1\u010b\14\25\3\0"+
    "\2\25\25\0\3\25\1\u010c\2\25\12\0\24\25\3\0"+
    "\2\25\25\0\3\25\1\u010d\2\25\12\0\24\25\3\0"+
    "\2\25\25\0\1\u010e\5\25\12\0\24\25\3\0\2\25"+
    "\25\0\1\u010f\5\25\12\0\24\25\3\0\2\25\25\0"+
    "\6\25\12\0\6\25\1\u0110\15\25\3\0\2\25\25\0"+
    "\6\25\12\0\7\25\1\u0111\14\25\3\0\2\25\25\0"+
    "\3\25\1\u0112\2\25\12\0\24\25\3\0\2\25\25\0"+
    "\6\25\12\0\7\25\1\u0113\14\25\3\0\2\25\25\0"+
    "\1\u0114\5\25\12\0\24\25\3\0\2\25\25\0\3\25"+
    "\1\u0115\2\25\12\0\24\25\3\0\2\25\25\0\3\25"+
    "\1\u0116\2\25\12\0\24\25\3\0\2\25";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12338];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\6\11\2\1\1\11\2\1\1\11"+
    "\14\1\1\11\1\1\2\11\21\1\2\0\1\11\1\1"+
    "\4\11\1\1\2\11\17\1\1\11\1\0\3\11\24\1"+
    "\1\0\1\11\1\0\1\1\2\0\20\1\3\11\32\1"+
    "\1\0\37\1\1\11\44\1\1\11\67\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public Set<String> types;
    public Set<String> preds;
    
    Symbol string(String name) {
    	return newToken(Terminals.STRING, name.substring(1, name.length() - 1));
    }

    Symbol resolve(String name) {
    	if(types.contains(name)) {
    		return newToken(Terminals.TYPE, name);
    	} else if (preds.contains(name)) {
    		return newToken(Terminals.PRED, name);
    	} else {
    		return newToken(Terminals.ID,   name);
    	}
    }

	Symbol newToken(short id)
	{
		return newToken(id, yytext());
	}

	Symbol newToken(short id, Object value)
	{
		return new Symbol(id, yyline + 1, yycolumn + 1, yylength(), value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 180) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol nextToken() throws java.io.IOException, Scanner.Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	return newToken(Terminals.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Scanner.Exception("unexpected character '" + yytext() + "'");
            } 
            // fall through
          case 96: break;
          case 2: 
            { 
            } 
            // fall through
          case 97: break;
          case 3: 
            { return newToken(Terminals.DIV);
            } 
            // fall through
          case 98: break;
          case 4: 
            { return newToken(Terminals.STAR);
            } 
            // fall through
          case 99: break;
          case 5: 
            { return newToken(Terminals.LPAREN);
            } 
            // fall through
          case 100: break;
          case 6: 
            { return newToken(Terminals.RPAREN);
            } 
            // fall through
          case 101: break;
          case 7: 
            { return newToken(Terminals.LBRACK);
            } 
            // fall through
          case 102: break;
          case 8: 
            { return newToken(Terminals.RBRACK);
            } 
            // fall through
          case 103: break;
          case 9: 
            { return newToken(Terminals.LBRACE);
            } 
            // fall through
          case 104: break;
          case 10: 
            { return newToken(Terminals.RBRACE);
            } 
            // fall through
          case 105: break;
          case 11: 
            { return newToken(Terminals.PLUS);
            } 
            // fall through
          case 106: break;
          case 12: 
            { return newToken(Terminals.MINUS);
            } 
            // fall through
          case 107: break;
          case 13: 
            { return newToken(Terminals.DOT);
            } 
            // fall through
          case 108: break;
          case 14: 
            { return newToken(Terminals.GT);
            } 
            // fall through
          case 109: break;
          case 15: 
            { return newToken(Terminals.BANG);
            } 
            // fall through
          case 110: break;
          case 16: 
            { return newToken(Terminals.TILDE);
            } 
            // fall through
          case 111: break;
          case 17: 
            { return resolve(yytext());
            } 
            // fall through
          case 112: break;
          case 18: 
            { return newToken(Terminals.MOD);
            } 
            // fall through
          case 113: break;
          case 19: 
            { return newToken(Terminals.LT);
            } 
            // fall through
          case 114: break;
          case 20: 
            { return newToken(Terminals.ASG);
            } 
            // fall through
          case 115: break;
          case 21: 
            { return newToken(Terminals.AMP);
            } 
            // fall through
          case 116: break;
          case 22: 
            { return newToken(Terminals.CARET);
            } 
            // fall through
          case 117: break;
          case 23: 
            { return newToken(Terminals.PIPE);
            } 
            // fall through
          case 118: break;
          case 24: 
            { return newToken(Terminals.QUESTION);
            } 
            // fall through
          case 119: break;
          case 25: 
            { return newToken(Terminals.COLON);
            } 
            // fall through
          case 120: break;
          case 26: 
            { return newToken(Terminals.COMMA);
            } 
            // fall through
          case 121: break;
          case 27: 
            { return newToken(Terminals.SEMICOLON);
            } 
            // fall through
          case 122: break;
          case 28: 
            { return newToken(Terminals.UNDERSCORE);
            } 
            // fall through
          case 123: break;
          case 29: 
            { return newToken(Terminals.NUM, new Integer(yytext()));
            } 
            // fall through
          case 124: break;
          case 30: 
            { return newToken(Terminals.ASG_OP, yytext());
            } 
            // fall through
          case 125: break;
          case 31: 
            { return newToken(Terminals.INCR);
            } 
            // fall through
          case 126: break;
          case 32: 
            { return newToken(Terminals.DECR);
            } 
            // fall through
          case 127: break;
          case 33: 
            { return newToken(Terminals.ARROW);
            } 
            // fall through
          case 128: break;
          case 34: 
            { return newToken(Terminals.SHR);
            } 
            // fall through
          case 129: break;
          case 35: 
            { return newToken(Terminals.GE);
            } 
            // fall through
          case 130: break;
          case 36: 
            { return newToken(Terminals.NEQ);
            } 
            // fall through
          case 131: break;
          case 37: 
            { return newToken(Terminals.IF);
            } 
            // fall through
          case 132: break;
          case 38: 
            { return newToken(Terminals.SHL);
            } 
            // fall through
          case 133: break;
          case 39: 
            { return newToken(Terminals.LE);
            } 
            // fall through
          case 134: break;
          case 40: 
            { return newToken(Terminals.EQ);
            } 
            // fall through
          case 135: break;
          case 41: 
            { return newToken(Terminals.AND);
            } 
            // fall through
          case 136: break;
          case 42: 
            { return newToken(Terminals.OR);
            } 
            // fall through
          case 137: break;
          case 43: 
            { return newToken(Terminals.COLONEQ);
            } 
            // fall through
          case 138: break;
          case 44: 
            { return newToken(Terminals.DCOLON);
            } 
            // fall through
          case 139: break;
          case 45: 
            { return newToken(Terminals.DO);
            } 
            // fall through
          case 140: break;
          case 46: 
            { return string(yytext());
            } 
            // fall through
          case 141: break;
          case 47: 
            { return newToken(Terminals.PARAM, yytext().substring(1));
            } 
            // fall through
          case 142: break;
          case 48: 
            { return newToken(Terminals.INT);
            } 
            // fall through
          case 143: break;
          case 49: 
            { return newToken(Terminals.END);
            } 
            // fall through
          case 144: break;
          case 50: 
            { return newToken(Terminals.OLD);
            } 
            // fall through
          case 145: break;
          case 51: 
            { return newToken(Terminals.FOR);
            } 
            // fall through
          case 146: break;
          case 52: 
            { return newToken(Terminals.EQV);
            } 
            // fall through
          case 147: break;
          case 53: 
            { return newToken(Terminals.IMP);
            } 
            // fall through
          case 148: break;
          case 54: 
            { return newToken(Terminals.PTO);
            } 
            // fall through
          case 149: break;
          case 55: 
            { return newToken(Terminals.ENUM);
            } 
            // fall through
          case 150: break;
          case 56: 
            { return newToken(Terminals.ELSE);
            } 
            // fall through
          case 151: break;
          case 57: 
            { return newToken(Terminals.FOLD);
            } 
            // fall through
          case 152: break;
          case 58: 
            { return newToken(Terminals.VOID);
            } 
            // fall through
          case 153: break;
          case 59: 
            { return newToken(Terminals.CHAR);
            } 
            // fall through
          case 154: break;
          case 60: 
            { return newToken(Terminals.RELY);
            } 
            // fall through
          case 155: break;
          case 61: 
            { return newToken(Terminals.MAP_LT);
            } 
            // fall through
          case 156: break;
          case 62: 
            { return newToken(Terminals.PURE);
            } 
            // fall through
          case 157: break;
          case 63: 
            { return newToken(Terminals.FAILS);
            } 
            // fall through
          case 158: break;
          case 64: 
            { return newToken(Terminals.APPLY);
            } 
            // fall through
          case 159: break;
          case 65: 
            { return newToken(Terminals.UNION);
            } 
            // fall through
          case 160: break;
          case 66: 
            { return newToken(Terminals.PRUNE);
            } 
            // fall through
          case 161: break;
          case 67: 
            { return newToken(Terminals.LIST_LT);
            } 
            // fall through
          case 162: break;
          case 68: 
            { return newToken(Terminals.LEMMA);
            } 
            // fall through
          case 163: break;
          case 69: 
            { return newToken(Terminals.BEGIN);
            } 
            // fall through
          case 164: break;
          case 70: 
            { return newToken(Terminals.BREAK);
            } 
            // fall through
          case 165: break;
          case 71: 
            { return newToken(Terminals.WHILE);
            } 
            // fall through
          case 166: break;
          case 72: 
            { return newToken(Terminals.SIZEOF);
            } 
            // fall through
          case 167: break;
          case 73: 
            { return newToken(Terminals.SHARED);
            } 
            // fall through
          case 168: break;
          case 74: 
            { return newToken(Terminals.STRUCT);
            } 
            // fall through
          case 169: break;
          case 75: 
            { return newToken(Terminals.INDUCT);
            } 
            // fall through
          case 170: break;
          case 76: 
            { return newToken(Terminals.EXISTS);
            } 
            // fall through
          case 171: break;
          case 77: 
            { return newToken(Terminals.FORALL);
            } 
            // fall through
          case 172: break;
          case 78: 
            { return newToken(Terminals.ASSERT);
            } 
            // fall through
          case 173: break;
          case 79: 
            { return newToken(Terminals.ASSUME);
            } 
            // fall through
          case 174: break;
          case 80: 
            { return newToken(Terminals.ATOMIC);
            } 
            // fall through
          case 175: break;
          case 81: 
            { return newToken(Terminals.AXIOMS);
            } 
            // fall through
          case 176: break;
          case 82: 
            { return newToken(Terminals.RETURN);
            } 
            // fall through
          case 177: break;
          case 83: 
            { return newToken(Terminals.UNFOLD);
            } 
            // fall through
          case 178: break;
          case 84: 
            { return newToken(Terminals.ENSURES);
            } 
            // fall through
          case 179: break;
          case 85: 
            { return newToken(Terminals.TYPEDEF);
            } 
            // fall through
          case 180: break;
          case 86: 
            { return newToken(Terminals.FUNCTION);
            } 
            // fall through
          case 181: break;
          case 87: 
            { return newToken(Terminals.CONSTANT);
            } 
            // fall through
          case 182: break;
          case 88: 
            { return newToken(Terminals.CONTINUE);
            } 
            // fall through
          case 183: break;
          case 89: 
            { return newToken(Terminals.RESOURCE);
            } 
            // fall through
          case 184: break;
          case 90: 
            { return newToken(Terminals.REWRITES);
            } 
            // fall through
          case 185: break;
          case 91: 
            { return newToken(Terminals.REQUIRES);
            } 
            // fall through
          case 186: break;
          case 92: 
            { return newToken(Terminals.INVARIANT);
            } 
            // fall through
          case 187: break;
          case 93: 
            { return newToken(Terminals.MAINTAINS);
            } 
            // fall through
          case 188: break;
          case 94: 
            { return newToken(Terminals.PREDICATE);
            } 
            // fall through
          case 189: break;
          case 95: 
            { return newToken(Terminals.GUARANTEE);
            } 
            // fall through
          case 190: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
